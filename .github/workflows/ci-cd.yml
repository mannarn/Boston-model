name: Model CI/CD Pipeline with Hyperparameter Tuning

on: [push]

jobs:
  build-and-train:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: mannarn
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build and push Train Docker image
    - name: Build and push Train Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Docker/Dockerfile.train
        push: true
        tags: mannarn/model-train:latest

  hyperparameter-tuning:
    runs-on: ubuntu-latest
    needs: build-and-train
    outputs:
      best_mse: ${{ steps.getting_results.outputs.best_mse }}
      old_best_mse: ${{ steps.retrieve_old.outputs.old_best_mse }}
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: pip install -r requirements.txt

    # Step 4: Set up Minikube
    - name: Set up Minikube
      run: |
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        chmod +x minikube
        sudo mv minikube /usr/local/bin/
        minikube start --driver=docker --cpus=4 --memory=8192mb

    # Step 5: Generate Kubernetes Jobs for hyperparameter tuning
    - name: Generate Kubernetes Jobs
      shell: pwsh
      run: |
        chmod +x scripts/generate-jobs.ps1
        ./scripts/generate-jobs.ps1

    # Step 6: Wait for Jobs to complete
    - name: Wait for Jobs to complete
      run: |
        kubectl wait --for=condition=complete --timeout=1000s job --all || true

    # Step 7: Check Job and Pod Status
    - name: Check Job and Pod Status
      run: |
        kubectl get jobs
        kubectl get pods

    # Step 8: Retrieve logs of failed pods: Debugging
    - name: Retrieve logs of failed pods
      run: |
        for pod in $(kubectl get pods --field-selector=status.phase=Failed -o jsonpath='{.items[*].metadata.name}'); do
          echo "Logs for pod $pod:"
          kubectl logs $pod
        done

    # Step 9: Get the results of hyperparameter tuning
    - name: Getting results
      id: getting_results
      run: |
        BEST_MODEL=$(minikube ssh -- "ls /data/model_*.joblib | sort -t'_' -k2,2n | head -1")

        if [ -z "$BEST_MODEL" ]; then
          echo "No model file found in /data/"
          exit 1
        fi
        echo "Best Model: $BEST_MODEL"

        BEST_MSE=$(minikube ssh "cat /data/metrics_*.txt | sort -n | head -1")
        if [ -z "$BEST_MSE" ]; then
          echo "No MSE file found in /data/"
          exit 1
        fi

        echo "Best MSE: $BEST_MSE"
        echo "best_mse=$BEST_MSE" >> $GITHUB_OUTPUT

        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions@github.com"

        git add Docker/best_model.joblib
        git commit --allow-empty -m "Uploading model [skip ci]" 
        #git remote set-url origin https://mannarn:${{ secrets.MY_PAT }}@github.com/mannarn/Boston-model.git
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/mannarn/Boston-model.git
        git push origin main
        
    # Step 10: Retrieve old model's best MSE score
    - name: Retrieve old model's best MSE score
      id: retrieve_old
      run: |
        if [ -f old_best_mse.txt ]; then
          OLD_BEST_MSE=$(cat old_best_mse.txt)
        else
          OLD_BEST_MSE=999999
        fi
        echo "Old Best MSE: $OLD_BEST_MSE"
        echo "old_best_mse=$OLD_BEST_MSE" >> $GITHUB_OUTPUT
        

  build-and-push-api:
    runs-on: ubuntu-latest
    needs: hyperparameter-tuning
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: mannarn
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 3: Build and push API Docker image
    - name: Build and push API Docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: Docker/Dockerfile.api
        push: true
        tags: mannarn/model-api:latest

deploy:
  runs-on: ubuntu-latest
  needs: [build-and-push-api, hyperparameter-tuning]
  env:
    BEST_MSE: ${{ needs.hyperparameter-tuning.outputs.best_mse }}
    OLD_BEST_MSE: ${{ needs.hyperparameter-tuning.outputs.old_best_mse }}
  steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Convert CRLF to LF
    - name: Convert CRLF to LF
      run: |
        find . -type f -exec sed -i 's/\r$//' {} \;

    # Step 3: Print old and new MSE scores
    - name: Check MSE Scores
      id: check_mse
      run: |
        echo "Old Best MSE: $OLD_BEST_MSE"
        echo "New Best MSE: $BEST_MSE"
        if awk "BEGIN {exit !($BEST_MSE < $OLD_BEST_MSE)}"; then
          echo "New model is better. Deploying..."
          echo "deploy=true" >> $GITHUB_ENV
        else
          echo "New model is not better. Skipping deployment."
          echo "deploy=false" >> $GITHUB_ENV
        fi

    # Step 4: Set up Kubernetes context (Minikube)
    - name: Set up Minikube context
      if: env.deploy == 'true'
      run: |
        minikube start --driver=docker --cpus=4 --memory=8192mb
        minikube kubectl -- version
        mkdir -p ~/.kube
        minikube kubectl -- config view --flatten > ~/.kube/config
        echo "KUBECONFIG=~/.kube/config" >> $GITHUB_ENV

    #step 4.5: Checking connection before deploying
    - name: Verify Kubernetes cluster connection
      run: |
        kubectl cluster-info
        kubectl get nodes
        kubectl config view

    # Step 5: Deploy to Kubernetes if new MSE is lower
    - name: Deploy to Kubernetes
      if: env.deploy == 'true'
      uses: azure/k8s-deploy@v1
      with:
        namespace: default
        manifests: |
          kubernetes/deployment.yaml
          kubernetes/flask_api_service.yaml
        images: mannarn/model-api:latest
        kubectl-version: "latest"
        validate: false  # Bypass validation for Minikube

    # Step 6: Update old model's best MSE score if new model is better
    - name: Update old model's best MSE score
      if: env.deploy == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "$BEST_MSE" > old_best_mse.txt
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions@github.com"
        git add old_best_mse.txt
        git commit --allow-empty -m "Updating old_best_mse [skip ci]"
        git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/mannarn/Boston-model.git
        git push origin main