name: Model CI/CD Pipeline with Hyperparameter Tuning (Windows)

on: [push]

jobs:
  build-and-train:
    runs-on: windows-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: mannarn
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Train Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Docker/Dockerfile.train
        push: true
        tags: mannarn/model-train:latest

  hyperparameter-tuning:
    runs-on: windows-latest
    needs: build-and-train
    outputs:
      best_mse: ${{ steps.collect_results.outputs.best_mse }}
      best_model_file: ${{ steps.collect_results.outputs.best_model_file }}
      old_best_mse: ${{ steps.retrieve_old.outputs.old_best_mse }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    - name: Install dependencies
      run: pip install -r requirements.txt

    - name: Set up Minikube
      shell: pwsh
      run: |
        Invoke-WebRequest -Uri "https://storage.googleapis.com/minikube/releases/latest/minikube-windows-amd64.exe" -OutFile "C:\minikube.exe"
        Move-Item -Path "C:\minikube.exe" -Destination "C:\Windows\System32\minikube.exe"
        minikube start --driver=hyperv --cpus=4 --memory=8192mb

    - name: Generate Kubernetes Jobs
      shell: pwsh
      run: |
        powershell -ExecutionPolicy Bypass -File scripts/generate-jobs.ps1

    - name: Wait for Jobs to complete
      shell: pwsh
      run: |
        kubectl wait --for=condition=complete --timeout=1000s job --all || $true

    - name: Check Job and Pod Status
      shell: pwsh
      run: |
        kubectl get jobs
        kubectl get pods

    - name: Retrieve logs of failed pods
      shell: pwsh
      run: |
        $pods = kubectl get pods --field-selector=status.phase=Failed -o jsonpath='{.items[*].metadata.name}'
        foreach ($pod in $pods) {
            Write-Output "Logs for pod $pod:"
            kubectl logs $pod
        }

    - name: Collect results
      id: collect_results
      shell: pwsh
      run: |
        minikube ssh "cat /data/metrics_*.txt" > all_metrics.txt
        $BEST_MSE = Get-Content all_metrics.txt | Sort-Object | Select-Object -First 1
        $BEST_MODEL = minikube ssh "ls /data/model_*.joblib" | Sort-Object | Select-Object -First 1

        if (-not $BEST_MODEL) {
            Write-Output "No model file found in /data/"
            exit 1
        }

        Write-Output "Best MSE: $BEST_MSE"
        Write-Output "Best Model: $BEST_MODEL"

        minikube ssh "cat $BEST_MODEL" > Docker/best_model.joblib

        echo "::set-output name=best_mse::$BEST_MSE"
        echo "::set-output name=best_model_file::$BEST_MODEL"

    - name: Retrieve old model's best MSE score
      id: retrieve_old
      shell: pwsh
      run: |
        if (Test-Path "old_best_mse.txt") {
            $OLD_BEST_MSE = Get-Content old_best_mse.txt
        } else {
            $OLD_BEST_MSE = 999999
        }
        Write-Output "Old Best MSE: $OLD_BEST_MSE"
        echo "::set-output name=old_best_mse::$OLD_BEST_MSE"

  build-and-push-api:
    runs-on: windows-latest
    needs: hyperparameter-tuning
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: mannarn
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Copy best model file into Docker folder
      shell: pwsh
      run: |
        $best_model_file = "${{ needs.hyperparameter-tuning.outputs.best_model_file }}"

        if (-not $best_model_file) {
            Write-Output "Error: BEST_MODEL_FILE variable is empty."
            exit 1
        }

        Write-Output "Copying best model file: /data/$best_model_file to Docker/best_model.joblib"
        minikube ssh "cat /data/$best_model_file" > Docker/best_model.joblib

    - name: Build and push API Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Docker/Dockerfile.api
        push: true
        tags: mannarn/model-api:latest

  deploy:
    runs-on: windows-latest
    needs: build-and-push-api
    env:
      BEST_MSE: ${{ needs.hyperparameter-tuning.outputs.best_mse }}
      OLD_BEST_MSE: ${{ needs.hyperparameter-tuning.outputs.old_best_mse }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to Kubernetes
      if: ${{ fromJson(env.BEST_MSE) < fromJson(env.OLD_BEST_MSE) }}
      uses: azure/k8s-deploy@v1
      with:
        namespace: default
        manifests: kubernetes/deployment.yaml
        images: mannarn/model-api:latest

    - name: Update old model's best MSE score
      if: ${{ fromJson(env.BEST_MSE) < fromJson(env.OLD_BEST_MSE) }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      shell: pwsh
      run: |
        Set-Content -Path old_best_mse.txt -Value $env:BEST_MSE
        git config --global user.email "mannarmannan02@gmail.com"
        git config --global user.name "mannarn"
        git add old_best_mse.txt
        git commit -m "Update old best MSE score"
        git push --force https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
