name: Model CI/CD Pipeline with Hyperparameter Tuning

on: [push]

jobs:
  build-and-train:
    runs-on: ubuntu-latest
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Step 3: Log in to Docker Hub
    - name: Log in to Docker Hub
      uses: docker/login-action@v1
      with:
        username: mannarn
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Step 4: Build and push Train Docker image
    - name: Build and push Train Docker image
      uses: docker/build-push-action@v2
      with:
        context: ./Docker
        file: Docker/Dockerfile.train
        push: true
        tags: mannarn/model-train:latest

    # Step 5: Run Train Docker container to produce the best model
    - name: Run Train Docker container
      run: |
        docker run --rm -v ${{ github.workspace }}:/app mannarn/model-train:latest

  hyperparameter-tuning:
    runs-on: ubuntu-latest
    needs: build-and-train
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.8'

    # Step 3: Install dependencies
    - name: Install dependencies
      run: pip install -r requirements.txt

    # Step 4: Set up Minikube
    - name: Set up Minikube
      run: |
        curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
        chmod +x minikube
        sudo mv minikube /usr/local/bin/
        minikube start --driver=docker --cpus=4 --memory=8192mb

    # Step 5: Generate Kubernetes Jobs for hyperparameter tuning
    - name: Generate Kubernetes Jobs
      shell: pwsh
      run: |
        chmod +x scripts/generate-jobs.ps1
        ./scripts/generate-jobs.ps1

    # Step 6: Wait for Jobs to complete
    - name: Wait for Jobs to complete
      run: |
        kubectl wait --for=condition=complete --timeout=10800s job --all || true

    # Step 7: Check Job and Pod Status
    - name: Check Job and Pod Status
      run: |
        kubectl get jobs
        kubectl get pods

    # Step 8: Collect results and find the best model
    - name: Collect results
      run: |
        minikube ssh "cat /data/metrics_*.txt" > all_metrics.txt
        BEST_MSE=$(sort -n all_metrics.txt | head -n 1)
        echo "Best MSE: $BEST_MSE"
        echo "BEST_MSE=$BEST_MSE" >> $GITHUB_ENV

    # Step 9: Retrieve old model's best MSE score
    - name: Retrieve old model's best MSE score
      run: |
        OLD_BEST_MSE=$(cat old_best_mse.txt)
        echo "Old Best MSE: $OLD_BEST_MSE"
        echo "OLD_BEST_MSE=$OLD_BEST_MSE" >> $GITHUB_ENV

  deploy:
    runs-on: ubuntu-latest
    needs: hyperparameter-tuning
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Build and push API Docker image
    - name: Build and push API Docker image
      if: env.BEST_MSE < env.OLD_BEST_MSE
      uses: docker/build-push-action@v2
      with:
        context: ./Docker
        file: Docker/Dockerfile.api
        push: true
        tags: mannarn/model-api:latest

    # Step 3: Deploy to Kubernetes
    - name: Deploy to Kubernetes
      if: env.BEST_MSE < env.OLD_BEST_MSE
      uses: azure/k8s-deploy@v1
      with:
        namespace: default
        manifests: kubernetes/deployment.yaml
        images: mannarn/model-api:latest

    # Step 4: Update old model's best MSE score if new model is better
    - name: Update old model's best MSE score
      if: env.BEST_MSE < env.OLD_BEST_MSE
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        echo "$BEST_MSE" > old_best_mse.txt
        git config --global user.email "mannarmannan02@gmail.com"
        git config --global user.name "mannarn"
        git add old_best_mse.txt
        git commit -m "Update old best MSE score"
        git push --force https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git